input {
  tcp {
    port => 1514
  }

  udp {
    port => 1514
  }

  syslog {
    type => syslog
  }
}

## Add your filters / logstash plugins configuration here
filter {
  grok {
    match => { "message" => "filesystem AUDIT \[audit_access=\'%{DATA:auditAccess}\' audit_access_type=\'%{DATA:auditType}\'] \[share=\'%{DATA:share}\' path=\'%{DATA:path}\'] \[op=\'%{DATA:operation}\'] by \[uid=\'%{DATA:uid}\', gid=\'%{DATA:gid}\'] at \[\'%{GREEDYDATA:hs_timestamp}\'\] from \[client=%{DATA:client_num}\]" }
  }
  mutate {
    gsub => [
      # add a ':' between all characters in the auditAccess field for later splitting
      "auditAccess", "(\w)", "\1:"
    ]
    split => { "auditAccess" => ":" }
  }
  translate {
    source => "[auditAccess]"
    iterate_on => "[auditAccess]"
    target => "[englishAuditAccess]"
    dictionary => {
      "r" => "read_data/list_directory"
      "w" => "write_data/add_file"
      "p" => "append_data/add_subdirectory"
      "x" => "execute"
      "d" => "delete_child"
      "D" => "delete"
      "a" => "read_attributes"
      "A" => "write_attributes"
      "c" => "read_acl"
      "C" => "write_acl"
      "o" => "write_owner"
      "R" => "read_named_attrs"
      "W" => "write_named_attrs"
      "S" => "synchronize"
      "e" => "write_retention"
      "E" => "write_retention_hold"
    }
    fallback => "translation_not_implemented"
  }
  translate {
    source => "[uid]"
    target => "[user][name]"
    dictionary_path => "/usr/share/logstash/lookup/SID2name.yml"
    fallback => "SID_not_found"
  }
}

output {
  elasticsearch {
    hosts => "elasticsearch:9200"
    user => "logstash_internal"
    password => "${LOGSTASH_INTERNAL_PASSWORD}"
  }
  stdout { codec => json {}}
}
